import { Link } from 'react-router-dom';
import { useState, useRef, useEffect, useCallback } from 'react';
import './Navbar.css';
import useOutsideClick from '../hooks/useOutsideClick';
import { useAuth } from '../context/AuthContext';
import { supabase } from '../config/supabase';

const Navbar = () => {
  const { state, logout } = useAuth();
  const [showAccountMenu, setShowAccountMenu] = useState(false);
  const [navbarCollapsed, setNavbarCollapsed] = useState(true);
  const dropdownRef = useRef<HTMLLIElement>(null);
  const navbarRef = useRef<HTMLDivElement>(null);
  
  // Verificar si el usuario existe en la tabla users y agregarlo si no existe
  useEffect(() => {
    const checkAndAddUser = async () => {
      // Solo ejecutar si hay un usuario autenticado con email
      if (state.user?.email && state.user?.id) {
        try {
          console.log('Verificando usuario en tabla users:', state.user.email);
          
          // Verificar primero si el email ya existe en la tabla users
          const emailCheckResponse = await fetch(
            `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/users?email=eq.${encodeURIComponent(state.user.email)}&select=id,email,role`, 
            {
              headers: {
                'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
              }
            }
          );
          
          if (!emailCheckResponse.ok) {
            console.error(`Error al verificar email: ${emailCheckResponse.status} ${emailCheckResponse.statusText}`);
            // Continuar con el proceso aunque haya error en la verificación
          } else {
            const existingUserByEmail = await emailCheckResponse.json();
            console.log('Verificación por email:', existingUserByEmail);
            
            // Si el usuario ya existe por email, no hacer nada más
            if (existingUserByEmail && existingUserByEmail.length > 0) {
              console.log('Usuario ya existe con este email, no es necesario insertar:', existingUserByEmail);
              return;
            }
            
            // Si llegamos aquí, el usuario no existe por email, verificar si existe por ID
            const idCheckResponse = await fetch(
              `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/users?id=eq.${state.user.id}&select=id,role`, 
              {
                headers: {
                  'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                  'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                  'Content-Type': 'application/json'
                }
              }
            );
            
            if (!idCheckResponse.ok) {
              console.error(`Error al verificar ID: ${idCheckResponse.status} ${idCheckResponse.statusText}`);
              // Continuar con el proceso aunque haya error en la verificación
            } else {
              const existingUserById = await idCheckResponse.json();
              console.log('Verificación por ID:', existingUserById);
              
              // Si el usuario ya existe por ID, no hacer nada más
              if (existingUserById && existingUserById.length > 0) {
                console.log('Usuario ya existe con este ID, no es necesario insertar:', existingUserById);
                return;
              }
              
              // Si llegamos aquí, el usuario no existe ni por email ni por ID, proceder a insertar
              console.log('Usuario no encontrado, procediendo a insertar...');
              
              // Verificar si hay un rol preestablecido para este email
              const roleResponse = await fetch(
                `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/user_roles_control?email=eq.${encodeURIComponent(state.user.email)}&select=role`, 
                {
                  headers: {
                    'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              const preassignedRoleData = await roleResponse.json();
              const roleToAssign = (preassignedRoleData && preassignedRoleData.length > 0) 
                ? preassignedRoleData[0].role 
                : 'free';
              
              console.log('Insertando usuario en tabla users:', {
                id: state.user.id,
                email: state.user.email,
                name: state.user.username || state.user.email,
                role: roleToAssign
              });
              
              try {
                // Insertar el usuario usando API REST
                const insertResponse = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/users`, {
                  method: 'POST',
                  headers: {
                    'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    id: state.user.id,
                    email: state.user.email,
                    name: state.user.username || state.user.email,
                    role: roleToAssign
                  })
                });
                
                if (!insertResponse.ok) {
                  const errorData = await insertResponse.text();
                  console.error('Error al insertar usuario usando API REST:', errorData);
                  // Continuamos con el proceso aunque haya error en la inserción
                } else {
                  console.log(`Usuario agregado exitosamente con rol: ${roleToAssign}`);
                }
              } catch (insertError) {
                console.error('Error en la solicitud de inserción:', insertError);
                // Continuamos con el proceso aunque haya error en la inserción
              }
              
              // Enviar correo de bienvenida (opcional)
              try {
                const { sendWelcomeEmail } = await import('../services/emailService');
                
                await sendWelcomeEmail({
                  name: state.user.username || state.user.email,
                  email: state.user.email,
                  isGoogleLogin: true
                });
                
                console.log('✅ Correo de bienvenida enviado exitosamente');
              } catch (emailError) {
                console.error('❌ Error al enviar correo de bienvenida:', emailError);
              }
            }
          }
        } catch (error) {
          console.error('Error al verificar/agregar usuario:', error);
          // Continuamos con el proceso aunque haya error en la verificación/inserción
        }
      };
      
      checkAndAddUser();
    }, [state.user]);

  // Memoizar callbacks para useOutsideClick
  const closeAccountMenu = useCallback(() => {
    if (showAccountMenu) setShowAccountMenu(false);
  }, [showAccountMenu]);

  const closeNavbar = useCallback(() => {
    if (!navbarCollapsed) setNavbarCollapsed(true);
  }, [navbarCollapsed]);

  // Usar el hook personalizado para cerrar el menú cuando se hace clic fuera
  useOutsideClick(dropdownRef, closeAccountMenu);

  // Cerrar el menú desplegable cuando se hace clic fuera del navbar
  useOutsideClick(navbarRef, closeNavbar);

  const toggleAccountMenu = useCallback((e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setShowAccountMenu(!showAccountMenu);
  }, [showAccountMenu]);

  const toggleNavbar = useCallback(() => {
    setNavbarCollapsed(!navbarCollapsed);
  }, [navbarCollapsed]);

  const handleLogout = useCallback((e: React.MouseEvent) => {
    e.preventDefault();
    logout();
    setShowAccountMenu(false);
    setNavbarCollapsed(true);
  }, [logout]);

  // Función para manejar el redimensionamiento de la ventana
  const handleResize = useCallback(() => {
    if (window.innerWidth >= 992) {
      setNavbarCollapsed(true);
    }
  }, []);

  // Cerrar el menú desplegable cuando cambia el tamaño de la ventana
  useEffect(() => {
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [handleResize]);

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-primary">
      <div className="container" ref={navbarRef}>
        <Link className="navbar-brand" to="/">
          <strong>EasyRif</strong>
        </Link>
        <button
          className="navbar-toggler"
          type="button"
          onClick={toggleNavbar}
          aria-controls="navbarNav"
          aria-expanded={!navbarCollapsed}
          aria-label="Toggle navigation"
        >
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className={`collapse navbar-collapse ${!navbarCollapsed ? 'show' : ''}`} id="navbarNav">
          <ul className="navbar-nav ms-auto">
            <li className="nav-item">
              <Link className="nav-link" to="/" onClick={() => setNavbarCollapsed(true)}>
                Inicio
              </Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/" onClick={() => setNavbarCollapsed(true)}>
                <i className="bi bi-graph-up me-1"></i>
                Inicio
              </Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/create" onClick={() => setNavbarCollapsed(true)}>
                Crear Rifa
              </Link>
            </li>
            <li className="nav-item dropdown" ref={dropdownRef}>
              <a
                className="nav-link dropdown-toggle"
                href="#"
                id="navbarDropdown"
                role="button"
                aria-expanded={showAccountMenu}
                onClick={toggleAccountMenu}
              >
                <i className="bi bi-person-circle me-1"></i>
                {state.user?.username || 'Usuario'}
              </a>
              <ul 
                className={`dropdown-menu dropdown-menu-end ${showAccountMenu ? 'show' : ''}`} 
                aria-labelledby="navbarDropdown"
              >
                <li>
                  <div className="dropdown-item-text">
                    <small className="text-muted">Conectado como:</small><br />
                    <strong>{state.user?.username}</strong>
                    <br />
                    <small className="text-muted">{state.user?.email}</small>
                  </div>
                </li>
                <li><hr className="dropdown-divider" /></li>
                <li>
                  <Link 
                    className="dropdown-item" 
                    to="/" 
                    onClick={() => {
                      setShowAccountMenu(false);
                      setNavbarCollapsed(true);
                    }}
                  >
                    <i className="bi bi-speedometer2 me-2"></i>
                    Inicio
                  </Link>
                </li>
                <li>
                  <Link 
                    className="dropdown-item" 
                    to="/create" 
                    onClick={() => {
                      setShowAccountMenu(false);
                      setNavbarCollapsed(true);
                    }}
                  >
                    <i className="bi bi-plus-circle me-2"></i>
                    Crear Rifa
                  </Link>
                </li>
                <li><hr className="dropdown-divider" /></li>
                <li>
                  <a 
                    className="dropdown-item text-danger" 
                    href="#"
                    onClick={handleLogout}
                  >
                    <i className="bi bi-box-arrow-right me-2"></i>
                    Cerrar sesión
                  </a>
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;