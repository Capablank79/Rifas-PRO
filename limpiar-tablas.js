// Script para eliminar todos los registros de las tablas users y user_roles_control
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

// Configuraci√≥n de Supabase
// Usamos la clave an√≥nima ya que hemos configurado pol√≠ticas RLS que permiten eliminaci√≥n
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://fdqmyjuzgqvklhdesgik.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY; // Usamos la clave an√≥nima en lugar de la clave de servicio

if (!supabaseKey) {
  console.error('Error: La variable de entorno VITE_SUPABASE_ANON_KEY es requerida');
  console.error('Por favor, aseg√∫rate de que el archivo .env contiene esta variable');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function limpiarTablas() {
  console.log('üßπ Iniciando limpieza de tablas...');
  
  try {
    // 1. Eliminar todos los registros de la tabla user_roles_control
    console.log('\nüìä Eliminando registros de la tabla user_roles_control...');
    // Primero obtenemos todos los IDs
    const { data: roleIds, error: errorGetRoles } = await supabase
      .from('user_roles_control')
      .select('id');
      
    if (errorGetRoles) {
      console.warn(`‚ö†Ô∏è No se pudieron obtener los IDs de user_roles_control: ${errorGetRoles.message}`);
      console.log('   Esto puede deberse a las restricciones de las pol√≠ticas RLS');
    } else if (roleIds && roleIds.length > 0) {
      console.log(`‚ÑπÔ∏è Se encontraron ${roleIds.length} registros para eliminar`);
      
      // Eliminamos cada registro individualmente
      for (const record of roleIds) {
        const { error: deleteError } = await supabase
          .from('user_roles_control')
          .delete()
          .eq('id', record.id);
          
        if (deleteError) {
          console.warn(`‚ö†Ô∏è Error al eliminar registro ${record.id}: ${deleteError.message}`);
        } else {
          console.log(`‚úÖ Registro ${record.id} eliminado correctamente`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è No se encontraron registros para eliminar en user_roles_control');
    }
    
    // El manejo de errores ya se realiz√≥ en el bloque anterior
    
    // 2. Eliminar todos los registros de la tabla users
    console.log('\nüë§ Eliminando registros de la tabla users...');
    // Primero obtenemos todos los IDs
    const { data: userIds, error: errorGetUsers } = await supabase
      .from('users')
      .select('id');
      
    if (errorGetUsers) {
      console.warn(`‚ö†Ô∏è No se pudieron obtener los IDs de users: ${errorGetUsers.message}`);
      console.log('   Esto puede deberse a las restricciones de las pol√≠ticas RLS');
    } else if (userIds && userIds.length > 0) {
      console.log(`‚ÑπÔ∏è Se encontraron ${userIds.length} registros para eliminar`);
      
      // Eliminamos cada registro individualmente
      for (const user of userIds) {
        const { error: deleteError } = await supabase
          .from('users')
          .delete()
          .eq('id', user.id);
          
        if (deleteError) {
          console.warn(`‚ö†Ô∏è Error al eliminar usuario ${user.id}: ${deleteError.message}`);
        } else {
          console.log(`‚úÖ Usuario ${user.id} eliminado correctamente`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è No se encontraron registros para eliminar en users');
    }
    
    // 3. Verificar registros visibles (seg√∫n pol√≠ticas RLS)
    console.log('\nüîç Verificando registros visibles seg√∫n pol√≠ticas RLS...');
    
    const { data: dataRoles, error: errorCheckRoles } = await supabase
      .from('user_roles_control')
      .select('count');
    
    if (errorCheckRoles) {
      console.log(`‚ÑπÔ∏è No se pueden verificar registros en user_roles_control: ${errorCheckRoles.message}`);
      console.log('   Esto es normal si las pol√≠ticas RLS restringen la visibilidad');
    } else {
      console.log(`üìä Registros visibles en user_roles_control: ${dataRoles[0]?.count || 0}`);
    }
    
    const { data: dataUsers, error: errorCheckUsers } = await supabase
      .from('users')
      .select('count');
    
    if (errorCheckUsers) {
      console.log(`‚ÑπÔ∏è No se pueden verificar registros en users: ${errorCheckUsers.message}`);
      console.log('   Esto es normal si las pol√≠ticas RLS restringen la visibilidad');
    } else {
      console.log(`üë§ Registros visibles en users: ${dataUsers[0]?.count || 0}`);
    }
    
    console.log('\n‚ú® Proceso completado');
    console.log('\nüîÑ Ahora puedes hacer login con Google Auth y se crear√°n nuevos registros en las tablas');
    console.log('   El sistema te mostrar√° la p√°gina HomePageFree.tsx si las pol√≠ticas RLS est√°n configuradas correctamente');
    console.log('   Despu√©s del login, podr√°s verificar en Supabase que se han creado los registros correspondientes');
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error.message);
    process.exit(1);
  }
}

limpiarTablas();